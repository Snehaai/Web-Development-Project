const express = require('express');
const Entry = require('../models/Entry');
const User = require('../models/User');
const { auth } = require('../middleware/auth');

const router = express.Router();

// Input validation helper
const validateEntryInput = (req, res, next) => {
    const { content, mood } = req.body;
    
    if (!content || content.trim().length === 0) {
        return res.status(400).json({
            message: 'Entry content is required'
        });
    }
    
    if (!mood || mood < 1 || mood > 5) {
        return res.status(400).json({
            message: 'Mood rating must be between 1 and 5'
        });
    }
    
    next();
};

// @route   GET /api/entries
// @desc    Get all entries for authenticated user
// @access  Private
router.get('/', auth, async (req, res) => {
    try {
        const { 
            page = 1, 
            limit = 10, 
            sortBy = 'entryDate', 
            order = 'desc',
            mood,
            startDate,
            endDate,
            search
        } = req.query;

        // Build query
        const query = { user: req.user._id };
        
        // Filter by mood
        if (mood) {
            query.mood = parseInt(mood);
        }
        
        // Filter by date range
        if (startDate || endDate) {
            query.entryDate = {};
            if (startDate) {
                query.entryDate.$gte = new Date(startDate);
            }
            if (endDate) {
                query.entryDate.$lte = new Date(endDate);
            }
        }
        
        // Search in content and tags
        if (search) {
            query.$or = [
                { content: { $regex: search, $options: 'i' } },
                { tags: { $in: [new RegExp(search, 'i')] } }
            ];
        }

        // Execute query with pagination
        const entries = await Entry.find(query)
            .sort({ [sortBy]: order === 'desc' ? -1 : 1 })
            .limit(parseInt(limit))
            .skip((parseInt(page) - 1) * parseInt(limit))
            .populate('user', 'name');

        // Get total count for pagination
        const totalEntries = await Entry.countDocuments(query);

        res.json({
            entries,
            pagination: {
                currentPage: parseInt(page),
                totalPages: Math.ceil(totalEntries / parseInt(limit)),
                totalEntries,
                hasNext: parseInt(page) < Math.ceil(totalEntries / parseInt(limit)),
                hasPrev: parseInt(page) > 1
            }
        });

    } catch (error) {
        console.error('Get entries error:', error);
        res.status(500).json({
            message: 'Server error retrieving entries'
        });
    }
});

// @route   GET /api/entries/:id
// @desc    Get single entry by ID
// @access  Private
router.get('/:id', auth, async (req, res) => {
    try {
        const entry = await Entry.findOne({
            _id: req.params.id,
            user: req.user._id
        });

        if (!entry) {
            return res.status(404).json({
                message: 'Entry not found'
            });
        }

        res.json({ entry });

    } catch (error) {
        console.error('Get entry error:', error);
        
        if (error.name === 'CastError') {
            return res.status(400).json({
                message: 'Invalid entry ID'
            });
        }
        
        res.status(500).json({
            message: 'Server error retrieving entry'
        });
    }
});

// @route   POST /api/entries
// @desc    Create new entry
// @access  Private
router.post('/', auth, validateEntryInput, async (req, res) => {
    try {
        const {
            title,
            content,
            mood,
            tags,
            activities,
            gratitude,
            goals,
            weather,
            entryDate
        } = req.body;

        const entry = new Entry({
            user: req.user._id,
            title: title?.trim(),
            content: content.trim(),
            mood: parseInt(mood),
            tags: tags || [],
            activities: activities || [],
            gratitude: gratitude || [],
            goals: goals || [],
            weather,
            entryDate: entryDate ? new Date(entryDate) : new Date()
        });

        await entry.save();

        // Update user stats
        const user = await User.findById(req.user._id);
        user.updateStats(entry.entryDate);
        await user.save();

        // Populate user field before sending response
        await entry.populate('user', 'name');

        res.status(201).json({
            message: 'Entry created successfully',
            entry
        });

    } catch (error) {
        console.error('Create entry error:', error);
        
        if (error.name === 'ValidationError') {
            const errors = Object.values(error.errors).map(err =>
