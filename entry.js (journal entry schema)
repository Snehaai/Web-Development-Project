const mongoose = require('mongoose');

const entrySchema = new mongoose.Schema({
    user: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: [true, 'User is required']
    },
    title: {
        type: String,
        trim: true,
        maxlength: [100, 'Title cannot be more than 100 characters']
    },
    content: {
        type: String,
        required: [true, 'Content is required'],
        maxlength: [10000, 'Content cannot be more than 10000 characters']
    },
    mood: {
        type: Number,
        required: [true, 'Mood rating is required'],
        min: [1, 'Mood rating must be between 1 and 5'],
        max: [5, 'Mood rating must be between 1 and 5']
    },
    tags: [{
        type: String,
        trim: true,
        lowercase: true,
        maxlength: [30, 'Tag cannot be more than 30 characters']
    }],
    activities: [{
        type: String,
        enum: [
            'exercise', 'meditation', 'reading', 'socializing', 'work', 
            'cooking', 'music', 'nature', 'creativity', 'learning',
            'travel', 'gaming', 'volunteering', 'therapy', 'other'
        ]
    }],
    gratitude: [{
        type: String,
        maxlength: [200, 'Gratitude item cannot be more than 200 characters']
    }],
    goals: [{
        text: {
            type: String,
            maxlength: [200, 'Goal cannot be more than 200 characters']
        },
        completed: {
            type: Boolean,
            default: false
        }
    }],
    weather: {
        condition: {
            type: String,
            enum: ['sunny', 'cloudy', 'rainy', 'snowy', 'stormy', 'foggy']
        },
        temperature: Number
    },
    isPrivate: {
        type: Boolean,
        default: true
    },
    entryDate: {
        type: Date,
        default: Date.now
    }
}, {
    timestamps: true
});

// Index for efficient queries
entrySchema.index({ user: 1, entryDate: -1 });
entrySchema.index({ user: 1, mood: 1 });
entrySchema.index({ user: 1, tags: 1 });

// Virtual for mood emoji
entrySchema.virtual('moodEmoji').get(function() {
    const emojis = ['', 'üò¢', 'üòü', 'üòê', 'üôÇ', 'üòä'];
    return emojis[this.mood] || 'üòê';
});

// Virtual for formatted date
entrySchema.virtual('formattedDate').get(function() {
    return this.entryDate.toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
    });
});

// Static method to get user's mood analytics
entrySchema.statics.getMoodAnalytics = async function(userId, days = 30) {
    const startDate = new Date();
    startDate.setDate(startDate.getDate() - days);
    
    const analytics = await this.aggregate([
        {
            $match: {
                user: mongoose.Types.ObjectId(userId),
                entryDate: { $gte: startDate }
            }
        },
        {
            $group: {
                _id: null,
                averageMood: { $avg: '$mood' },
                totalEntries: { $sum: 1 },
                moodDistribution: {
                    $push: {
                        mood: '$mood',
                        date: '$entryDate'
                    }
                }
            }
        }
    ]);
    
    return analytics[0] || { averageMood: 0, totalEntries: 0, moodDistribution: [] };
};

// Static method to get mood trends by day
entrySchema.statics.getMoodTrends = async function(userId, days = 7) {
    const startDate = new Date();
    startDate.setDate(startDate.getDate() - days);
    
    const trends = await this.aggregate([
        {
            $match: {
                user: mongoose.Types.ObjectId(userId),
                entryDate: { $gte: startDate }
            }
        },
        {
            $group: {
                _id: {
                    $dateToString: {
                        format: '%Y-%m-%d',
                        date: '$entryDate'
                    }
                },
                averageMood: { $avg: '$mood' },
                entryCount: { $sum: 1 }
            }
        },
        {
            $sort: { '_id': 1 }
        }
    ]);
    
    return trends;
};

// Ensure virtuals are included in JSON output
entrySchema.set('toJSON', { virtuals: true });

module.exports = mongoose.model('Entry', entrySchema);
