<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mindful Moments</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f8f9fa;
            color: #333;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }

        /* Header */
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 0;
            border-bottom: 1px solid #e9ecef;
            margin-bottom: 30px;
        }

        .logo {
            display: flex;
            align-items: center;
            font-size: 18px;
            font-weight: 600;
        }

        .logo::before {
            content: "‚óè";
            color: #28a745;
            margin-right: 8px;
            font-size: 24px;
        }

        .nav {
            display: flex;
            gap: 30px;
        }

        .nav a {
            text-decoration: none;
            color: #666;
            font-weight: 500;
            transition: color 0.3s;
            cursor: pointer;
        }

        .nav a:hover, .nav a.active {
            color: #333;
        }

        .user-profile {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
            cursor: pointer;
            position: relative;
        }

        .user-dropdown {
            position: absolute;
            top: 100%;
            right: 0;
            background: white;
            border: 1px solid #e9ecef;
            border-radius: 8px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
            min-width: 150px;
            display: none;
            z-index: 1000;
        }

        .user-dropdown.show {
            display: block;
        }

        .user-dropdown a {
            display: block;
            padding: 10px 15px;
            color: #333;
            text-decoration: none;
            border-bottom: 1px solid #f8f9fa;
        }

        .user-dropdown a:hover {
            background: #f8f9fa;
        }

        /* Auth Forms */
        .auth-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 2000;
        }

        .auth-overlay.show {
            display: flex;
        }

        .auth-form {
            background: white;
            padding: 40px;
            border-radius: 12px;
            box-shadow: 0 10px 40px rgba(0,0,0,0.1);
            width: 90%;
            max-width: 400px;
        }

        .auth-form h2 {
            margin-bottom: 20px;
            text-align: center;
            color: #2c3e50;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            color: #666;
            font-weight: 500;
        }

        .form-group input {
            width: 100%;
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-size: 16px;
        }

        .form-group input:focus {
            outline: none;
            border-color: #007bff;
        }

        .auth-btn {
            width: 100%;
            background: #007bff;
            color: white;
            border: none;
            padding: 12px;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            margin-bottom: 10px;
        }

        .auth-btn:hover {
            background: #0056b3;
        }

        .auth-switch {
            text-align: center;
            color: #666;
            margin-top: 20px;
        }

        .auth-switch a {
            color: #007bff;
            text-decoration: none;
            cursor: pointer;
        }

        .close-btn {
            position: absolute;
            top: 15px;
            right: 20px;
            background: none;
            border: none;
            font-size: 24px;
            cursor: pointer;
            color: #999;
        }

        /* Main Content */
        .main-title {
            font-size: 28px;
            font-weight: 600;
            margin-bottom: 8px;
            color: #2c3e50;
        }

        .subtitle {
            color: #666;
            margin-bottom: 30px;
        }

        /* Loading and Error States */
        .loading {
            text-align: center;
            padding: 40px;
            color: #666;
        }

        .error {
            background: #f8d7da;
            color: #721c24;
            padding: 12px;
            border-radius: 8px;
            margin-bottom: 20px;
            border: 1px solid #f5c6cb;
        }

        .success {
            background: #d1edff;
            color: #0c5460;
            padding: 12px;
            border-radius: 8px;
            margin-bottom: 20px;
            border: 1px solid #b6effb;
        }

        /* Mood Selector */
        .mood-selector {
            display: flex;
            gap: 15px;
            margin-bottom: 30px;
            justify-content: center;
        }

        .mood-emoji {
            font-size: 32px;
            padding: 15px;
            border-radius: 50%;
            cursor: pointer;
            transition: all 0.3s ease;
            background: #fff;
            border: 2px solid transparent;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .mood-emoji:hover {
            transform: scale(1.1);
            box-shadow: 0 4px 20px rgba(0,0,0,0.15);
        }

        .mood-emoji.selected {
            border-color: #007bff;
            background: #e3f2fd;
        }

        /* Journal Input */
        .journal-input {
            background: white;
            border-radius: 12px;
            padding: 25px;
            box-shadow: 0 2px 20px rgba(0,0,0,0.1);
            margin-bottom: 30px;
        }

        .journal-textarea {
            width: 100%;
            min-height: 120px;
            border: none;
            resize: vertical;
            font-size: 16px;
            line-height: 1.6;
            color: #333;
            background: transparent;
            outline: none;
        }

        .journal-textarea::placeholder {
            color: #999;
        }

        .save-btn {
            background: #333;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            float: right;
            transition: background 0.3s;
        }

        .save-btn:hover {
            background: #555;
        }

        .save-btn:disabled {
            background: #ccc;
            cursor: not-allowed;
        }

        /* Past Entries */
        .section-title {
            font-size: 20px;
            font-weight: 600;
            margin-bottom: 20px;
            color: #2c3e50;
        }

        .entry-item {
            background: white;
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 15px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.08);
            display: flex;
            align-items: flex-start;
            gap: 15px;
            transition: transform 0.2s;
        }

        .entry-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 20px rgba(0,0,0,0.12);
        }

        .entry-icon {
            width: 40px;
            height: 40px;
            background: #f8f9fa;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-shrink: 0;
        }

        .entry-content {
            flex: 1;
        }

        .entry-date {
            font-weight: 600;
            color: #333;
            margin-bottom: 5px;
        }

        .entry-text {
            color: #666;
            line-height: 1.5;
        }

        .entry-mood {
            font-size: 20px;
            margin-left: auto;
        }

        .delete-btn, .edit-btn {
            padding: 5px 10px;
            border: none;
            border-radius: 4px;
            font-size: 12px;
            cursor: pointer;
            margin-left: 5px;
        }

        .delete-btn {
            background: #dc3545;
            color: white;
        }

        .delete-btn:hover {
            background: #c82333;
        }

        .edit-btn {
            background: #ffc107;
            color: #212529;
        }

        .edit-btn:hover {
            background: #e0a800;
        }

        /* Mood Trends */
        .mood-trends {
            background: white;
            border-radius: 12px;
            padding: 25px;
            margin-top: 30px;
            box-shadow: 0 2px 20px rgba(0,0,0,0.1);
        }

        .trend-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .trend-label {
            color: #666;
            font-size: 14px;
        }

        .trend-average {
            font-size: 36px;
            font-weight: 700;
            color: #2c3e50;
            margin-bottom: 5px;
        }

        .trend-change {
            font-size: 14px;
            font-weight: 600;
        }

        .trend-change.positive {
            color: #28a745;
        }

        .trend-change.negative {
            color: #dc3545;
        }

        .chart-container {
            height: 150px;
            background: #f8f9fa;
            border-radius: 8px;
            margin-top: 20px;
            position: relative;
            overflow: hidden;
        }

        .chart-line {
            position: absolute;
            top: 50%;
            left: 0;
            right: 0;
            height: 2px;
            background: #007bff;
            transform: translateY(-50%);
        }

        .chart-labels {
            display: flex;
            justify-content: space-between;
            margin-top: 10px;
            font-size: 12px;
            color: #999;
        }

        .hidden {
            display: none;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .container {
                padding: 15px;
            }

            .header {
                flex-direction: column;
                gap: 20px;
                text-align: center;
            }

            .nav {
                gap: 20px;
            }

            .mood-selector {
                flex-wrap: wrap;
                gap: 10px;
            }

            .mood-emoji {
                font-size: 28px;
                padding: 12px;
            }

            .main-title {
                font-size: 24px;
            }
        }
    </style>
</head>
<body>
    <!-- Auth Overlay -->
    <div class="auth-overlay" id="authOverlay">
        <div class="auth-form">
            <button class="close-btn" onclick="closeAuthModal()">&times;</button>
            <div id="loginForm">
                <h2>Welcome Back</h2>
                <div class="form-group">
                    <label for="loginEmail">Email</label>
                    <input type="email" id="loginEmail" required>
                </div>
                <div class="form-group">
                    <label for="loginPassword">Password</label>
                    <input type="password" id="loginPassword" required>
                </div>
                <button class="auth-btn" onclick="login()">Login</button>
                <div class="auth-switch">
                    Don't have an account? <a onclick="showRegister()">Sign up</a>
                </div>
            </div>
            <div id="registerForm" class="hidden">
                <h2>Create Account</h2>
                <div class="form-group">
                    <label for="registerName">Name</label>
                    <input type="text" id="registerName" required>
                </div>
                <div class="form-group">
                    <label for="registerEmail">Email</label>
                    <input type="email" id="registerEmail" required>
                </div>
                <div class="form-group">
                    <label for="registerPassword">Password</label>
                    <input type="password" id="registerPassword" required>
                </div>
                <button class="auth-btn" onclick="register()">Create Account</button>
                <div class="auth-switch">
                    Already have an account? <a onclick="showLogin()">Login</a>
                </div>
            </div>
        </div>
    </div>

    <div class="container">
        <!-- Header -->
        <div class="header">
            <div class="logo">Mindful Moments</div>
            <nav class="nav">
                <a href="#" class="active">Home</a>
                
            </nav>
            <div class="user-profile" id="userProfile" onclick="toggleUserDropdown()">
                <span id="userInitial">?</span>
                <div class="user-dropdown" id="userDropdown">
                    <a href="#" onclick="showProfile()">Profile</a>
                    <a href="#" onclick="logout()">Logout</a>
                </div>
            </div>
        </div>

        <!-- Error/Success Messages -->
        <div id="messageContainer"></div>

        <!-- Main Content -->
        <div id="appContent">
            <h1 class="main-title">How are you feeling today, <span id="userName">User</span>?</h1>
            <p class="subtitle">Choose an emoji that best represents your mood.</p>

            <!-- Mood Selector -->
            <div class="mood-selector">
                <div class="mood-emoji" data-mood="1">üò¢</div>
                <div class="mood-emoji" data-mood="2">üòü</div>
                <div class="mood-emoji" data-mood="3">üòê</div>
                <div class="mood-emoji" data-mood="4">üôÇ</div>
                <div class="mood-emoji" data-mood="5">üòä</div>
            </div>

            <!-- Journal Input -->
            <div class="journal-input">
                <textarea class="journal-textarea" placeholder="Write about your day..." id="journalText"></textarea>
                <button class="save-btn" id="saveBtn" onclick="saveEntry()">Save Entry</button>
                <div style="clear: both;"></div>
            </div>

            <!-- Past Entries -->
            <h2 class="section-title">Past Entries</h2>
            <div id="entriesContainer">
                <div class="loading">Loading your entries...</div>
            </div>

            <!-- Mood Trends -->
            <div class="mood-trends">
                <h2 class="section-title">Mood Trends</h2>
                <div class="trend-header">
                    <div>
                        <div class="trend-label">Mood Trend</div>
                        <div class="trend-average">Average: <span id="averageMood">-</span></div>
                        <div class="trend-change" id="trendChange">Last 7 Days: -</div>
                    </div>
                </div>
                <div class="chart-container">
                    <div class="chart-line"></div>
                </div>
                <div class="chart-labels">
                    <span>Mon</span>
                    <span>Tue</span>
                    <span>Wed</span>
                    <span>Thu</span>
                    <span>Fri</span>
                    <span>Sat</span>
                    <span>Sun</span>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Configuration
        const API_BASE = window.location.hostname === 'localhost' ? 
            'http://localhost:5000/api' : '/api';

        // Global state
        let currentUser = null;
        let authToken = null;
        let selectedMood = null;
        let editingId = null;
        let entries = [];

        // Initialize the app
        document.addEventListener('DOMContentLoaded', function() {
            checkAuth();
            setupEventListeners();
        });

        function setupEventListeners() {
            // Mood selector event listeners
            document.querySelectorAll('.mood-emoji').forEach(emoji => {
                emoji.addEventListener('click', function() {
                    selectMood(this.dataset.mood);
                });
            });

            // Close dropdown when clicking outside
            document.addEventListener('click', function(e) {
                if (!e.target.closest('.user-profile')) {
                    document.getElementById('userDropdown').classList.remove('show');
                }
            });

            // Enter key to save entry
            document.getElementById('journalText').addEventListener('keydown', function(e) {
                if (e.ctrlKey && e.key === 'Enter') {
                    saveEntry();
                }
            });
        }

        // Authentication functions
        function checkAuth() {
            authToken = localStorage.getItem('authToken');
            if (!authToken) {
                showAuthModal();
                return;
            }

            // Verify token with backend
            fetchAPI('/auth/me')
                .then(data => {
                    currentUser = data.user;
                    updateUserUI();
                    loadEntries();
                    loadAnalytics();
                })
                .catch(() => {
                    localStorage.removeItem('authToken');
                    showAuthModal();
                });
        }

        async function login() {
            const email = document.getElementById('loginEmail').value;
            const password = document.getElementById('loginPassword').value;

            if (!email || !password) {
                showMessage('Please fill in all fields', 'error');
                return;
            }

            try {
                const data = await fetchAPI('/auth/login', {
                    method: 'POST',
                    body: JSON.stringify({ email, password })
                });

                authToken = data.token;
                localStorage.setItem('authToken', authToken);
                currentUser = data.user;
                
                closeAuthModal();
                updateUserUI();
                loadEntries();
                loadAnalytics();
                showMessage('Welcome back!', 'success');

            } catch (error) {
                showMessage(error.message || 'Login failed', 'error');
            }
        }

        async function register() {
            const name = document.getElementById('registerName').value;
            const email = document.getElementById('registerEmail').value;
            const password = document.getElementById('registerPassword').value;

            if (!name || !email || !password) {
                showMessage('Please fill in all fields', 'error');
                return;
            }

            try {
                const data = await fetchAPI('/auth/register', {
                    method: 'POST',
                    body: JSON.stringify({ name, email, password })
                });

                authToken = data.token;
                localStorage.setItem('authToken', authToken);
                currentUser = data.user;
                
                closeAuthModal();
                updateUserUI();
                loadEntries();
                showMessage('Account created successfully!', 'success');

            } catch (error) {
                showMessage(error.message || 'Registration failed', 'error');
            }
        }

        function logout() {
            localStorage.removeItem('authToken');
            authToken = null;
            currentUser = null;
            entries = [];
            showAuthModal();
            document.getElementById('userDropdown').classList.remove('show');
        }

        function updateUserUI() {
            if (currentUser) {
                document.getElementById('userName').textContent = currentUser.name;
                document.getElementById('userInitial').textContent = currentUser.name.charAt(0).toUpperCase();
            }
        }

        // UI functions
        function showAuthModal() {
            document.getElementById('authOverlay').classList.add('show');
            document.getElementById('appContent').style.display = 'none';
        }

        function closeAuthModal() {
            document.getElementById('authOverlay').classList.remove('show');
            document.getElementById('appContent').style.display = 'block';
            clearAuthForms();
        }

        function clearAuthForms() {
            document.getElementById('loginEmail').value = '';
            document.getElementById('loginPassword').value = '';
            document.getElementById('registerName').value = '';
            document.getElementById('registerEmail').value = '';
            document.getElementById('registerPassword').value = '';
        }

        function showLogin() {
            document.getElementById('loginForm').classList.remove('hidden');
            document.getElementById('registerForm').classList.add('hidden');
        }

        function showRegister() {
            document.getElementById('loginForm').classList.add('hidden');
            document.getElementById('registerForm').classList.remove('hidden');
        }

        function toggleUserDropdown() {
            document.getElementById('userDropdown').classList.toggle('show');
        }

        function showMessage(message, type) {
            const messageContainer = document.getElementById('messageContainer');
            const messageDiv = document.createElement('div');
            messageDiv.className = type;
            messageDiv.textContent = message;
            
            messageContainer.innerHTML = '';
            messageContainer.appendChild(messageDiv);
            
            setTimeout(() => {
                messageDiv.remove();
            }, 5000);
        }

        // API helper function
        async function fetchAPI(endpoint, options = {}) {
            const config = {
                headers: {
                    'Content-Type': 'application/json',
                    ...(authToken && { Authorization: `Bearer ${authToken}` })
                },
                ...options
            };

            const response = await fetch(`${API_BASE}${endpoint}`, config);
            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.message || 'Something went wrong');
            }

            return data;
        }

        // Journal functions
        function selectMood(mood) {
            // Remove previous selection
            document.querySelectorAll('.mood-emoji').forEach(emoji => {
                emoji.classList.remove('selected');
            });
            
            // Add selection to clicked emoji
            document.querySelector(`[data-mood="${mood}"]`).classList.add('selected');
            selectedMood = parseInt(mood);
        }

        async function saveEntry() {
            const journalText = document.getElementById('journalText').value;
            
            if (!journalText.trim()) {
                showMessage('Please write something in your journal entry.', 'error');
                return;
            }
            
            if (!selectedMood) {
                showMessage('Please select a mood emoji.', 'error');
                return;
            }

            const saveBtn = document.getElementById('saveBtn');
            saveBtn.disabled = true;
            saveBtn.textContent = editingId ? 'Updating...' : 'Saving...';

            try {
                const entryData = {
                    content: journalText,
                    mood: selectedMood,
                    entryDate: new Date().toISOString()
                };

                if (editingId) {
                    // Update existing entry
                    await fetchAPI(`/entries/${editingId}`, {
                        method: 'PUT',
                        body: JSON.stringify(entryData)
                    });
                    showMessage('Entry updated successfully!', 'success');
                } else {
                    // Create new entry
                    await fetchAPI('/entries', {
                        method: 'POST',
                        body: JSON.stringify(entryData)
                    });
                    showMessage('Entry saved successfully!', 'success');
                }

                // Clear form
                document.getElementById('journalText').value = '';
                document.querySelectorAll('.mood-emoji').forEach(emoji => {
                    emoji.classList.remove('selected');
                });
                selectedMood = null;
                editingId = null;
                saveBtn.textContent = 'Save Entry';

                // Refresh data
                await loadEntries();
                await loadAnalytics();

            } catch (error) {
                showMessage(error.message || 'Failed to save entry', 'error');
            } finally {
                saveBtn.disabled = false;
            }
        }

        async function loadEntries() {
            const container = document.getElementById('entriesContainer');
            
            try {
                container.innerHTML = '<div class="loading">Loading your entries...</div>';
                
                const data = await fetchAPI('/entries?limit=10&sortBy=entryDate&order=desc');
                entries = data.entries || [];

                displayEntries();

            } catch (error) {
                container.innerHTML = '<div class="error">Failed to load entries. Please try again.</div>';
                console.error('Load entries error:', error);
            }
        }

        function displayEntries() {
            const container = document.getElementById('entriesContainer');
            
            if (entries.length === 0) {
                container.innerHTML = '<p style="text-align: center; color: #999; padding: 40px;">No entries yet. Start writing your first journal entry!</p>';
                return;
            }

            container.innerHTML = entries.map(entry => `
                <div class="entry-item">
                    <div class="entry-icon">üìù</div>
                    <div class="entry-content">
                        <div class="entry-date">${formatDate(entry.entryDate)}</div>
                        <div class="entry-text">${entry.content}</div>
                    </div>
                    <div class="entry-mood">${getMoodEmoji(entry.mood)}</div>
                    <button class="edit-btn" onclick="editEntry('${entry._id}')">Edit</button>
                    <button class="delete-btn" onclick="deleteEntry('${entry._id}')">Delete</button>
                </div>
            `).join('');
        }

        function formatDate(dateString) {
            return new Date(dateString).toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });
        }

        function getMoodEmoji(mood) {
            const emojis = ['', 'üò¢', 'üòü', 'üòê', 'üôÇ', 'üòä'];
            return emojis[mood] || 'üòê';
        }

        async function deleteEntry(id) {
            if (!confirm('Are you sure you want to delete this entry?')) {
                return;
            }

            try {
                await fetchAPI(`/entries/${id}`, {
                    method: 'DELETE'
                });
                
                showMessage('Entry deleted successfully!', 'success');
                await loadEntries();
                await loadAnalytics();

            } catch (error) {
                showMessage(error.message || 'Failed to delete entry', 'error');
            }
        }

        async function editEntry(id) {
            const entry = entries.find(e => e._id === id);
            if (!entry) return;

            document.getElementById('journalText').value = entry.content;
            selectMood(entry.mood);
            editingId = id;
            document.getElementById('saveBtn').textContent = 'Update Entry';
            
            // Scroll to top
            window.scrollTo({ top: 0, behavior: 'smooth' });
        }

        async function loadAnalytics() {
            try {
                // Load mood analytics
                const analyticsData = await fetchAPI('/entries/analytics/mood?days=30');
                const analytics = analyticsData.analytics;

                if (analytics && analytics.totalEntries > 0) {
                    document.getElementById('averageMood').textContent = analytics.averageMood.toFixed(1);
                    
                    // Load trends
                    const trendsData = await fetchAPI('/entries/analytics/trends?days=14');
                    const trends = trendsData.trends;
                    
                    if (trends && trends.length > 1) {
                        const recent = trends.slice(-7).reduce((sum, t) => sum + t.averageMood, 0) / Math.min(trends.slice(-7).length, 7);
                        const older = trends.slice(-14, -7).reduce((sum, t) => sum + t.averageMood, 0) / Math.min(trends.slice(-14, -7).length, 7);
                        
                        if (older > 0) {
                            const change = ((recent - older) / older * 100).toFixed(0);
                            const changeElement = document.getElementById('trendChange');
                            
                            if (change > 0) {
                                changeElement.textContent = `Last 7 Days: +${change}%`;
                                changeElement.className = 'trend-change positive';
                            } else if (change < 0) {
                                changeElement.textContent = `Last 7 Days: ${change}%`;
                                changeElement.className = 'trend-change negative';
                            } else {
                                changeElement.textContent = `Last 7 Days: No change`;
                                changeElement.className = 'trend-change';
                            }
                        }
                    }
                } else {
                    document.getElementById('averageMood').textContent = '-';
                    document.getElementById('trendChange').textContent = 'No data yet';
                }

            } catch (error) {
                console.error('Analytics error:', error);
                document.getElementById('averageMood').textContent = '-';
                document.getElementById('trendChange').textContent = 'Error loading trends';
            }
        }

        

        // Simple auth simulation (replace with backend auth)
        function checkAuth() {
            const userData = localStorage.getItem('userData');
            if (userData) {
                currentUser = JSON.parse(userData);
                updateUserUI();
                loadEntries();
                loadAnalytics();
            } else {
                // Simulate user for demo
                currentUser = {
                    id: 'demo_user',
                    name: 'Sarah',
                    email: 'sarah@example.com'
                };
                localStorage.setItem('userData', JSON.stringify(currentUser));
                updateUserUI();
                loadEntries();
                loadAnalytics();
            }
        }

        // API helper function (simplified for demo)
        async function fetchAPI(endpoint, options = {}) {
            // Simulate API calls for demo
            await new Promise(resolve => setTimeout(resolve, 500));
            
            // For demo purposes, use localStorage
            return simulateAPI(endpoint, options);
        }

        function simulateAPI(endpoint, options = {}) {
            const method = options.method || 'GET';
            const data = options.body ? JSON.parse(options.body) : null;

            // Get entries from localStorage
            let storedEntries = JSON.parse(localStorage.getItem('journalEntries') || '[]');

            switch (true) {
                case endpoint === '/entries' && method === 'GET':
                    return { entries: storedEntries };

                case endpoint === '/entries' && method === 'POST':
                    const newEntry = {
                        _id: Date.now().toString(),
                        ...data,
                        entryDate: new Date().toISOString(),
                        user: currentUser.id
                    };
                    storedEntries.unshift(newEntry);
                    localStorage.setItem('journalEntries', JSON.stringify(storedEntries));
                    return { entry: newEntry };

                case endpoint.startsWith('/entries/') && method === 'PUT':
                    const updateId = endpoint.split('/')[2];
                    const entryIndex = storedEntries.findIndex(e => e._id === updateId);
                    if (entryIndex !== -1) {
                        storedEntries[entryIndex] = { ...storedEntries[entryIndex], ...data };
                        localStorage.setItem('journalEntries', JSON.stringify(storedEntries));
                        return { entry: storedEntries[entryIndex] };
                    }
                    throw new Error('Entry not found');

                case endpoint.startsWith('/entries/') && method === 'DELETE':
                    const deleteId = endpoint.split('/')[2];
                    storedEntries = storedEntries.filter(e => e._id !== deleteId);
                    localStorage.setItem('journalEntries', JSON.stringify(storedEntries));
                    return { message: 'Entry deleted' };

                case endpoint.includes('/analytics/mood'):
                    const totalMood = storedEntries.reduce((sum, entry) => sum + entry.mood, 0);
                    const averageMood = storedEntries.length > 0 ? totalMood / storedEntries.length : 0;
                    return {
                        analytics: {
                            averageMood,
                            totalEntries: storedEntries.length,
                            moodDistribution: storedEntries.map(e => ({ mood: e.mood, date: e.entryDate }))
                        }
                    };

                case endpoint.includes('/analytics/trends'):
                    const days = parseInt(endpoint.match(/days=(\d+)/)?.[1] || '7');
                    const startDate = new Date();
                    startDate.setDate(startDate.getDate() - days);
                    
                    const recentEntries = storedEntries.filter(e => new Date(e.entryDate) >= startDate);
                    const trends = [];
                    
                    for (let i = 0; i < days; i++) {
                        const date = new Date();
                        date.setDate(date.getDate() - i);
                        const dayEntries = recentEntries.filter(e => {
                            const entryDate = new Date(e.entryDate);
                            return entryDate.toDateString() === date.toDateString();
                        });
                        
                        if (dayEntries.length > 0) {
                            const avgMood = dayEntries.reduce((sum, e) => sum + e.mood, 0) / dayEntries.length;
                            trends.push({
                                _id: date.toISOString().split('T')[0],
                                averageMood: avgMood,
                                entryCount: dayEntries.length
                            });
                        }
                    }
                    
                    return { trends: trends.reverse() };

                default:
                    throw new Error('API endpoint not found');
            }
        }
    </script>
</body>
</html>
